import React, {useCallback} from "react";

import {Archive, ArchiveFile, ArchiveFileList} from "./lib/archive.js";
import {Container} from "./lib/api.js";

const blank = (zone: string) => `
# ${zone}
# This file is auto-generated by the DNS editor.
# You may experience data loss if you edit this file directly.

`;

export default function ManageZonesForm(props: {
	archive: Archive,
	modal: (e: React.ReactNode) => void,
	notice: (e: React.ReactNode) => void,
	container: Container,
	openZone: (zoneName: string) => void,
	onChanges: (zones: ArchiveFileList) => void
}) {
	const [files, setFiles] = React.useState(props.archive.listFiles()
		.filter(file => file.meta().name.endsWith('.conf')));

	const submitForm = React.useCallback((e: React.FormEvent<HTMLFormElement>) => {
		// e.preventDefault();
	}, []);

	const [selected, setSelected] = React.useState([] as string[]);

	const save = React.useCallback(async () => {
		let status: 'not-saved' | 'saved' | 'error' | 'reloaded' | 'reload-error' = 'not-saved';

		await props.container
			.saveArchive("/etc/dnsmasq.d/", props.archive)
			.then(_ => status = 'saved')
			.catch(_ => status = 'error');

		if (props.container.last_known_state == 'running')
			await props.container.signal('SIGHUP')
				.then(_ => status = 'reloaded')
				.catch(_ => status = 'reload-error');

		props.notice(({
			'not-saved': <>
				<h3>{"No changes were saved"}</h3>
				<p>{"Please save your changes manually."}</p>
			</>,
			error: <>
				<h3>{"An error occurred"}</h3>
				<p>{"The changes were not saved."}</p>
			</>,
			saved: <>
				<h3>{"Restart was not possible"}</h3>
				<p>{"The changes have been saved, but the container was not able to be restarted."}</p>
			</>,
			reloaded: <>
				<h3>{"Changes saved"}</h3>
				<p>{"All changes were successfully saved."}</p>
			</>,
			'reload-error': <>
				<h3>{"Changes saved"}</h3>
				<p>{"All changes were successfully saved, but the container was not able to be restarted."}</p>
				<p>{"Please check the logs for more information."}</p>
			</>
		})[status]);
	}, [props, props.archive]);

	React.useEffect(() => {
		void save();
		props.onChanges(files);
	}, [files, save]);

	const newZone = React.useCallback(async () => {
		const zoneName = await new Promise<string>(ok =>
			props.modal(<CreateZoneForm onConfirm={zoneName => ok(zoneName)}/>));

		const zone = await props.archive
			.create(`${zoneName}.conf`);

		await zone.writeText(blank(zoneName));

		setFiles([...files, zone]);
	}, [props, setFiles, files]);

	const bulkDelete = React.useCallback(async (zones: string[]) => {
		if (zones.length > 1) {
			const confirm = await new Promise<boolean>(ok =>
				props.modal(<ConfirmBulkDeleteForm zones={zones} onConfirm={() => ok(true)}/>));

			if (!confirm) return;
		}

		for (const zone of zones)
			props.archive.delete(zone);

		await save()
			.then(() => setFiles(props.archive.listFiles()
				.filter(file => file.meta().name.endsWith('.conf'))));
	}, [props, save, setFiles]);

	const rename = React.useCallback(async (zoneName: string) => {
		const newName = await new Promise<string>(ok => props.modal(<RenameZoneForm zoneName={zoneName}
																					onConfirm={zoneName => ok(zoneName)}/>));

		props.archive.rename(zoneName, `${newName}.conf`);
		await save()
			.then(() => setFiles(props.archive.listFiles()
				.filter(file => file.meta().name.endsWith('.conf'))));
	}, [props, save, setFiles]);

	const form = React.useRef<HTMLFormElement>(null);
	const onChangeForm = useCallback((file: ArchiveFile) => {
		props.openZone(file.meta().name);
		form.current?.requestSubmit();
	}, [props, form.current]);

	return <form method="dialog" className="form-grid" onSubmit={() => submitForm} ref={form}>
		<div className="form-grid-item flex-v gap-s">
			<h3>{"Manage Zones"}</h3>
			<p>{"Manage the list of zones."}</p>
			<blockquote className="warning" data-icon={"\ue002"}>
				{"The following actions may be destructive and irreversible. Ensure you have proper backups before proceeding."}
			</blockquote>
			{props.container.last_known_state !== 'running' ? <blockquote className="info" data-icon={"\ue88e"}>
				{"The Docker API does not permit deleting or renaming files. Therefore this is achieved via the command-line. This is only available while the container is running."}
			</blockquote> : null}
		</div>

		<div className="form-grid-item button-group align-maj-end">
			{selected.length > 0 ? <button className="danger" type="button" data-icon={"\ue872"}
										   onClick={_ => bulkDelete(selected)}>{"Delete Selected"}</button> : null}
			<button className="primary" type="button" data-icon={"\ue145"}
					onClick={() => newZone()}>{"New Zone"}</button>
		</div>
		<div className="form-grid-item">
			<table>
				<thead>
				<tr>
					<th style={{width: 'fit-content'}}>
						<button type="button" className="tertiary symbolic"
								data-icon={selected.length < files.length ? "\ue162" : "\uf74d"}
								onClick={_ => {
									if (selected.length < files.length)
										setSelected(files.map(i => i.meta().name));
									else
										setSelected([]);
								}}/>
					</th>
					<th style={{width: '100%'}}>{"Zone Name"}</th>
					<th>{"Actions"}</th>
				</tr>
				</thead>
				<tbody>
				{files.map(file => <tr key={file.meta().name}>
					<td>
						<input type="checkbox" id={`container-${file.meta().name}`} name={`container`}
							   value={file.meta().name} checked={selected.includes(file.meta().name)} onChange={e => {
							if (e.currentTarget.checked)
								setSelected([...selected.filter(i => i != file.meta().name), file.meta().name]);

							else
								setSelected(selected.filter(i => i != file.meta().name));
						}}/>
					</td>
					<td>{file.meta().name.slice(0, -5)}</td>
					<td className="flex-h align-maj-end button-group">
						<button type="button" className="symbolic" data-icon={"\uea77"}
								onClick={() => onChangeForm(file)}/>
						<button type="button" disabled={props.container.last_known_state !== 'running'} className="warning symbolic" data-icon={"\ue254"}
								onClick={() => rename(file.meta().name)}/>
						<button type="button" disabled={props.container.last_known_state !== 'running'} className="danger symbolic" data-icon={"\ue872"}
								onClick={() => bulkDelete([file.meta().name])}/>
					</td>
				</tr>)}
				</tbody>
			</table>
		</div>

		<div className="form-grid-item button-group align-maj-end">
			<button type="submit" className="success" data-icon={"\ue5ca"}>{"Save"}</button>
		</div>
	</form>;
}

export function ConfirmBulkDeleteForm(props: { zones: string[], onConfirm: () => void }) {
	return <form method="dialog"
				 onSubmit={() => props.onConfirm()}>
		<h3>{"Bulk Delete"}</h3>
		<p>{"Are you sure you want to delete the following zones?"}</p>
		<ul>
			{props.zones.map(zone => <li key={zone}>{zone.slice(0, -5)}</li>)}
		</ul>
		<div className="flex-h align-maj-end">
			<button className="danger" data-icon={"\ue872"}>{"Delete"}</button>
		</div>
	</form>
}

export function RenameZoneForm(props: { zoneName: string, onConfirm: (zoneName: string) => void }) {
	return <form method="dialog"
				 onSubmit={e => props.onConfirm((e.currentTarget.elements.namedItem('zone-name') as HTMLInputElement).value)}>
		<h3>{"Create Zone"}</h3>
		<p>{"Enter the name of the zone you would like to create."}</p>

		<div className={"flex-h padding-v-s"}>
			<input autoFocus type="text" placeholder="Zone Name" name="zone-name" className="stretch"
				   defaultValue={props.zoneName.slice(0, -5)} required/>
		</div>

		<div className="flex-h align-maj-end">
			<button className="success" data-icon={"\ue5ca"}>{"Create Zone"}</button>
		</div>
	</form>;
}

export function CreateZoneForm(props: { onConfirm: (zone: string) => void }) {
	const onSubmit = React.useCallback((e: React.FormEvent<HTMLFormElement>) => {
		const input = e.currentTarget.elements.namedItem('zone');

		if (input instanceof HTMLInputElement)
			props.onConfirm(input.value);
	}, [props]);

	return <form onSubmit={onSubmit} method="dialog">
		<h3>{"Create Zone"}</h3>
		<p>{"Enter the name of the zone you would like to create."}</p>
		<div className={"flex-h padding-v-s"}>
			<input autoFocus type="text" placeholder="Zone Name" name="zone" className="stretch" required/>
		</div>
		<div className="flex-h align-maj-end">
			<button className="success" data-icon={"\ue5ca"}>{"Create Zone"}</button>
		</div>
	</form>;
}